<?xml version="1.0" encoding="utf-8"?>
 
<nlog xmlns="http://www.nlog-project.org/schemas/NLog.xsd"
      xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
      autoReload="true"
      internalLogLevel="Debug"
      internalLogToTrace="true"
      internalLogFile="logs/internal-nlog.txt"
      throwExceptions="true"
      throwConfigExceptions="true"
      >

  <variable name="logdirectory" value="logs/${shortdate}"/>
  
  <!--
  <variable name="gmailUsername" value="${trim-whitespace:${file-contents:${basedir}/gmailusername.txt}}" />
  <variable name="gmailPassword" value="${trim-whitespace:${file-contents:${basedir}/gmailpassword.txt}}" />
  -->

  <!-- Load the ASP.NET Core plugin -->
  <extensions>
    <add assembly="NLog.Web.AspNetCore"/>
    <add assembly="NLog.Extensions.Logging"/>
    <add assembly="NLog.MailKit"/>
  </extensions>

  <!-- the targets to write to -->
  <targets>
    <!-- write logs to file  -->

    <!-- 
        Log in a separate thread, possibly queueing up to
        5000 messages. When the queue overflows, discard any
        extra messages
        
        Asynchronous logging is recommended for multi-threaded server applications which 
        run for a long time and is not recommended for quickly-finishing command line applications.
    -->

    <target name="allfile" xsi:type="AsyncWrapper" queueLimit="5000" overflowAction="Discard">
      <target name="allfile" xsi:type="File"
              fileName="${logdirectory}/nlog-all-${shortdate}.log"
              layout="${longdate}|${event-properties:item=EventId.Id}|${uppercase:${level}}|${logger}|${message} ${exception}"
              lineEnding="CRLF"
              maxArchiveFiles="90"
              archiveFileName="${logdirectory}/archives/{#}.log"
              archiveDateFormat="yyyy-MM-dd HH_mm_ss"
              archiveNumbering="Date"
              archiveEvery="Month" />
    </target>

    <!-- another file log, only own logs. Uses some ASP.NET core renderers -->
    <target name="ownFile-web" xsi:type="AsyncWrapper" queueLimit="5000" overflowAction="Discard">
      <target name="ownFile-web" xsi:type="File"  fileName="${logdirectory}/nlog-own-${shortdate}.log"
              layout="${longdate}|${event-properties:item=EventId.Id}|${uppercase:${level}}|${logger}|${message} ${exception}|url: ${aspnet-request-url}|action: ${aspnet-mvc-action}${newline}" />
    
    </target>

    <!--https://github.com/nlog/NLog/wiki/Database-target-->

    <target  name="db" xsi:type="Database"
             connectionString="${var:connectionString}"
             commandType="StoredProcedure"
             commandText="[dbo].[Logs_AddEntry]"
             >
      <!--
      
Script for creating the dbo.Logs table.
      
CREATE TABLE [dbo].[Logs] (
   [Id] [int] IDENTITY(1,1) NOT NULL,
   [MachineName] [nvarchar](200) NULL,
   [SiteName] [nvarchar](200) NOT NULL,
   [Logged] [datetime] NOT NULL,
   [Level] [varchar](5) NOT NULL,
   [UserName] [nvarchar](200) NULL,
   [Message] [nvarchar](max) NOT NULL,
   [Logger] [nvarchar](300) NULL,
   [Properties] [nvarchar](max) NULL,
   [ServerName] [nvarchar](200) NULL,
   [Port] [nvarchar](100) NULL,
   [Url] [nvarchar](2000) NULL,
   [Https] [bit] NULL,
   [ServerAddress] [nvarchar](100) NULL,
   [RemoteAddress] [nvarchar](100) NULL,
   [Callsite] [nvarchar](300) NULL,
   [Exception] [nvarchar](max) NULL,
 CONSTRAINT [PK_dbo.Log] PRIMARY KEY CLUSTERED ([ID] ASC) 
   WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY] TEXTIMAGE_ON [PRIMARY];

GO

IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[Logs_AddEntry]') AND type in (N'P', N'PC'))
DROP PROCEDURE [dbo].[Logs_AddEntry]

CREATE PROCEDURE [dbo].[Logs_AddEntry] (
  @machineName nvarchar(200),
  @siteName nvarchar(200),
  @logged datetime,
  @level varchar(5),
  @userName nvarchar(200),
  @message nvarchar(max),
  @logger nvarchar(300),
  @properties nvarchar(max),
  @serverName nvarchar(200),
  @port nvarchar(100),
  @url nvarchar(2000),
  @https bit,
  @serverAddress nvarchar(100),
  @remoteAddress nvarchar(100),
  @callSite nvarchar(300),
  @exception nvarchar(max)
) AS
BEGIN
  INSERT INTO [dbo].[Logs] (
    [MachineName],
    [SiteName],
    [Logged],
    [Level],
    [UserName],
    [Message],
    [Logger],
    [Properties],
    [ServerName],
    [Port],
    [Url],
    [Https],
    [ServerAddress],
    [RemoteAddress],
    [CallSite],
    [Exception]
  ) VALUES (
    @machineName,
    @siteName,
    @logged,
    @level,
    @userName,
    @message,
    @logger,
    @properties,
    @serverName,
    @port,
    @url,
    @https,
    @serverAddress,
    @remoteAddress,
    @callSite,
    @exception
  );
END
-->

      <parameter name="@machineName"    layout="${machinename}" />
      <parameter name="@siteName"       layout="${iis-site-name}" />
      <parameter name="@logged"         layout="${date}" />
      <parameter name="@level"          layout="${level}" />
      <parameter name="@username"       layout="${aspnet-user-identity}" />
      <parameter name="@message"        layout="${message}${newline}${stacktrace}" />
      <parameter name="@logger"         layout="${logger}" />
      <parameter name="@properties"     layout="${all-event-properties:separator=|}" />
      <parameter name="@serverName"     layout="${aspnet-request:serverVariable=SERVER_NAME}" />
      <parameter name="@port"           layout="${aspnet-request:serverVariable=SERVER_PORT}" />
      <parameter name="@url"            layout="${aspnet-request:serverVariable=HTTP_URL}" />
      <parameter name="@https"          layout="${when:inner=1:when='${aspnet-request:serverVariable=HTTPS}' == 'on'}${when:inner=0:when='${aspnet-request:serverVariable=HTTPS}' != 'on'}" />
      <parameter name="@serverAddress"  layout="${aspnet-request:serverVariable=LOCAL_ADDR}" />
      <parameter name="@remoteAddress"  layout="${aspnet-request:serverVariable=REMOTE_ADDR}:${aspnet-request:serverVariable=REMOTE_PORT}" />
      <parameter name="@callSite"       layout="${callsite}${callsite-linenumber}" />
      <parameter name="@exception"      layout="${exception:tostring}" />
    </target>


    <!-- send mail through GMail server -->
    <!--
    <target  name="asyncMail" xsi:type="AsyncWrapper" queueLimit="10000" timeToSleepBetweenBatches="50" batchSize="100" fullBatchSizeWriteLimit="5" overflowAction="Discard"  >
      <target xsi:type="Mail"
              smtpServer="smtp.gmail.com"
              smtpPort="587"
              enableSsl="true"
              smtpAuthentication="Basic"
              smtpUserName="${gmailUsername}"
              smtpPassword="${gmailPassword}"
              from="${gmailUsername}"
              to="${gmailUsername}"
              subject="${level} - ${iis-site-name} logs"
              addNewLines="true" />
    </target>
    -->

    <!-- write to the void aka just remove -->
    <target xsi:type="Null" name="blackhole" />
  </targets>

  <!-- rules to map from logger name to target -->
  <rules>
    <!--All logs, including from Microsoft-->
    <logger name="*" minlevel="Debug" writeTo="allfile" />
    <!--
    <logger name="*" minlevel="Debug" writeTo="ownFile-web" />
    <logger name="*" minlevel="Error" writeTo="db" />    
    <logger name="*" minlevel="Error" writeTo="asyncMail" />    
    <logger name="Microsoft.*" minlevel="Trace" writeTo="blackhole" final="true" />
    -->
  </rules>
</nlog>